PVector[] cities;
int num = 20;

float dist;
PVector[] shor;

void setup() {
  size(1920,1080);
  cities = new PVector[num];
  shor = new PVector[num];
  for (int i = 0; i < num; i++) {
    PVector v = new PVector(random(width), random(height));
    cities[i] = v;
  }

  float d = calcdist(cities);
  dist = d;
  arrayCopy(cities, shor);

}

void draw() {
  background(0);
  fill(255);
  for (int i = 0; i < cities.length; i++) {
    ellipse(cities[i].x, cities[i].y, 8, 8);
  }

  stroke(255);
  strokeWeight(1);
  noFill();
  beginShape();
  for (int i = 0; i < cities.length; i++) {
    vertex(cities[i].x, cities[i].y);
  }
  endShape();

  stroke(200, 50, 100);
  strokeWeight(4);
  noFill();
  beginShape();
  for (int i = 0; i < cities.length; i++) {
    vertex(shor[i].x, shor[i].y);
  }
  endShape();



  int i = floor(random(cities.length));
  int j = floor(random(cities.length));
  swap(cities, i, j);

  float d = calcdist(cities);
  if (d < dist) {
    dist = d;
    arrayCopy(cities, shor);
  }
}

void swap(PVector[] a, int i, int j) {
  PVector temp = a[i];
  a[i] = a[j];
  a[j] = temp;
}


float calcdist(PVector[] points) {
  float sum = 0;
  for (int i = 0; i < points.length - 1; i++) {
    float d = dist(points[i].x, points[i].y, points[i + 1].x, points[i + 1].y);
    sum += d;
  }
  return sum;
}
